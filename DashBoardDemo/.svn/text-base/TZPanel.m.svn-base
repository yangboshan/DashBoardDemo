//
//  TZPanel.m
//  DashBoardDemo
//
//  Created by Apple on 13-4-26.
//  Copyright (c) 2013年 XLDZ. All rights reserved.
//

#import "TZPanel.h"

@interface TZPanel (private)
- (CGFloat) parseToX:(CGFloat) radius Angle:(CGFloat)angle;
- (CGFloat) parseToY:(CGFloat) radius Angle:(CGFloat)angle;
- (CGFloat) transToRadian:(CGFloat)angel;
- (CGFloat) parseToAngle:(CGFloat) val;
- (CGFloat) parseToValue:(CGFloat) val;
- (void)setTextLabel:(NSInteger)labelNum;
- (void)setLineMark:(NSInteger)labelNum;
- (void) pointToAngle:(CGFloat) angle Duration:(CGFloat) duration;
@end

@implementation TZPanel

@synthesize gaugeView,pointer,context;
@synthesize labelArray;
@synthesize maxAngle,maxNumber,minAngle,minNumber,cellNumber,cellMarkNumber,panelText;
@synthesize labelNumber,decimalDigit,defaultSize;


- (id)initWithFrame:(CGRect)frame
{
    self = [super initWithFrame:frame];
    if (self) {
        //设置背景透明
        [self setBackgroundColor:[UIColor clearColor]];
    }
    return self;
}

float factor = 1;
-(void)initVariables
{
    factor = self.defaultSize/300;
    scoleNum = self.defaultSize/self.frame.size.width;    
    maxNum = self.maxNumber;                         
    minNum = self.minNumber;                         
    minAngle = self.minAngle;                       
    maxAngle = self.maxAngle;                        
    gaugeValue = 0.0f;                               
    gaugeAngle = -self.maxAngle;                     
    angleperValue = (maxAngle - minAngle)/(maxNum - minNum); 
    
    gaugeView= [UIImage imageNamed:@"panelbackground.png"];
    //添加指针
    UIImage *_pointer = [UIImage imageNamed:@"pointer.png"];
    pointer = [[UIImageView alloc] initWithImage:_pointer];
    pointer.layer.anchorPoint = CGPointMake(0.5, 0.78);
    
    CGPoint point = [self convertPoint:self.center fromView:[self superview]];
    pointer.center = point;
    
    
    pointer.transform = CGAffineTransformMakeScale(scoleNum*factor, scoleNum*factor);
    [self addSubview:pointer];
    //设置文字标签
    [self setTextLabel:self.cellNumber];
    //设置指针到0位置
    pointer.layer.transform = CATransform3DMakeRotation([self transToRadian:-self.maxAngle], 0, 0, 1);
    
}

/*
 * setTextLabel 绘制刻度值
 * @labelNum NSInteger 刻度值的数目
 */
-(void)setTextLabel:(NSInteger)labelNum
{
    labelArray = [NSMutableArray arrayWithCapacity:labelNum];
    CGPoint point = [self convertPoint:self.center fromView:[self superview]];
    
    CGFloat textDis = (maxNum - minNum)/labelNum;
    CGFloat angelDis = (maxAngle - minAngle)/labelNum;
    CGFloat radius = (point.x - 75)*scoleNum/factor;
    CGFloat currentAngle;
    CGFloat currentText = 0.0f;
    CGPoint centerPoint = point;
    
    for(int i=0;i<=labelNum;i++)
    {
        currentAngle = -30 + i * angelDis;
        currentText = minNum + i * textDis;
        UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(0 , 0 , 30*factor, 50*factor)];
        label.autoresizesSubviews = YES;
        label.textColor = [UIColor whiteColor];
        label.backgroundColor = [UIColor clearColor];
        //设置刻度的文字的格式
        if(i<labelNum/2){
            label.textAlignment = NSTextAlignmentLeft;
        }else if (i==labelNum/2){
            label.textAlignment = NSTextAlignmentCenter;
        }else{
            label.textAlignment = NSTextAlignmentRight;
        }
        label.text = [NSString stringWithFormat:@"%d",(int)currentText];
        label.center = CGPointMake(centerPoint.x-[self parseToX:radius Angle:currentAngle],centerPoint.y-[self parseToY:radius Angle:currentAngle]);
        
        [labelArray addObject:label];
        [self addSubview:label];
    }
    // 设置刻度表的名称
    
    UILabel *label = [[UILabel alloc]initWithFrame:CGRectMake(0 , 0 ,100, 40)];
    label.autoresizesSubviews = YES;
    label.textColor = [UIColor whiteColor];
    label.backgroundColor = [UIColor clearColor];
    label.textAlignment = NSTextAlignmentCenter;
    label.text = self.panelText;
    label.center = CGPointMake(centerPoint.x,centerPoint.y*3/1.8);
    [self addSubview:label];
    [label release];
    
    self.labelNumber = [[[UILabel alloc] initWithFrame:CGRectMake(0, 0, 100*factor, 40*factor)] autorelease];
    labelNumber.textColor = [UIColor whiteColor];
    labelNumber.backgroundColor = [UIColor clearColor];
    labelNumber.textAlignment = NSTextAlignmentCenter;
    labelNumber.center = CGPointMake(centerPoint.x,centerPoint.y*3/2.0);
    labelNumber.text = @"0.0";
    [self addSubview:self.labelNumber];
    
}

/*
 * setLineMark 绘制刻度的标记
 * @labelNum NSInteger 刻度是数目
 */
-(void)setLineMark:(NSInteger)labelNum
{
    
    CGPoint point = [self convertPoint:self.center fromView:[self superview]];
    
    CGFloat angelDis = (maxAngle - minAngle)/labelNum;
    CGFloat radius = point.x;
    CGFloat currentAngle;
    
    
    CGPoint centerPoint = CGPointMake(self.frame.size.width/2, self.frame.size.height/2);
    
    for(int i=0;i<=labelNum;i++)
    {
        currentAngle = -30 + i * angelDis ;
        //给刻度标记绘制不同的颜色
        //        if(i>labelNum*2/3)
        //        {
        //            CGContextSetStrokeColorWithColor(context, [[UIColor colorWithRed:1 green:0 blue:0 alpha:0.8] CGColor]);
        //        }else if(i>labelNum*1/3){
        //            CGContextSetStrokeColorWithColor(context, [[UIColor colorWithRed:1 green:1 blue:0 alpha:0.8] CGColor]);
        //        }else{
        //            CGContextSetStrokeColorWithColor(context, [[UIColor colorWithRed:0 green:1 blue:0 alpha:0.8] CGColor]);
        //        }
        
        
        CGContextSetStrokeColorWithColor(context, [[UIColor colorWithRed:1 green:1 blue:1 alpha:0.8] CGColor]);
        
        
        
        //绘制不同的长短的刻度
        if(i%5==0)
        {
            CGContextSetLineCap(context, kCGLineCapSquare);
            CGContextSetLineWidth(context, 3*factor);
            CGContextStrokePath(context);
            CGContextMoveToPoint(context,centerPoint.x-[self parseToX:radius-25*scoleNum*factor Angle:currentAngle], centerPoint.y-[self parseToY:radius-25*scoleNum*factor Angle:currentAngle]);
            CGContextAddLineToPoint(context,centerPoint.x-[self parseToX:radius-50*scoleNum*factor Angle:currentAngle], centerPoint.y-[self parseToY:radius-50*scoleNum*factor Angle:currentAngle]);
        }else{
            CGContextSetLineWidth(context, 2*factor);
            CGContextSetLineCap(context, kCGLineCapSquare);
            CGContextStrokePath(context);
            CGContextMoveToPoint(context,centerPoint.x-[self parseToX:radius-25*scoleNum*factor Angle:currentAngle], centerPoint.y-[self parseToY:radius-25*scoleNum*factor Angle:currentAngle]);
            CGContextAddLineToPoint(context,centerPoint.x-[self parseToX:radius-40*scoleNum*factor Angle:currentAngle], centerPoint.y-[self parseToY:radius-40*scoleNum*factor Angle:currentAngle]);
        }
    }
}

/*
 * setGaugeValue 移动到某个数值
 * @value CGFloat 移动到的数值
 * @isAnim BOOL   是否执行动画
 */
-(void)setGaugeValue:(CGFloat)value animation:(BOOL)isAnim
{
    CGFloat tempAngle = [self parseToAngle:value];
    gaugeValue = value;
    
    [self updateLabelText];
    
    
    //设置转动时间和转动动画
    if(isAnim){
        [self pointToAngle:tempAngle Duration:0.6f];
    }else
    {
        [self pointToAngle:tempAngle Duration:0.0f];
    }
}

-(void)updateLabelText
{
    NSString *formatString = @"%.";
    NSString *formatString1 = [NSString stringWithFormat:@"%d",self.decimalDigit];
    formatString = [formatString stringByAppendingString:formatString1];
    formatString = [formatString stringByAppendingString:@"f"];
    
    
    dispatch_async(dispatch_get_main_queue(), ^(void) {
        self.labelNumber.text = [NSString stringWithFormat:formatString,gaugeValue];
    });
}

/*
 * pointToAngle 按角度旋转
 * @angel CGFloat 角度
 * @duration CGFloat 动画执行时间
 */
- (void) pointToAngle:(CGFloat) angle Duration:(CGFloat) duration
{
    CAKeyframeAnimation *anim=[CAKeyframeAnimation animationWithKeyPath:@"transform"];
    NSMutableArray *values=[NSMutableArray array];
    anim.duration = duration;
    anim.autoreverses = NO;
    anim.fillMode = kCAFillModeForwards;
    anim.removedOnCompletion= YES;
    
    CGFloat distance = angle/10;
    //设置转动路径，不能直接用 CABaseAnimation 的toValue，那样是按最短路径的，转动超过180度时无法控制方向
    int i = 1;
    for(;i<=10;i++){
        [values addObject:[NSValue valueWithCATransform3D:CATransform3DRotate(CATransform3DIdentity, [self transToRadian:(gaugeAngle+distance*i)], 0, 0, 1)]];
    }
    //添加缓动效果
    [values addObject:[NSValue valueWithCATransform3D:CATransform3DRotate(CATransform3DIdentity, [self transToRadian:(gaugeAngle+distance*(i))], 0, 0, 1)]];
    [values addObject:[NSValue valueWithCATransform3D:CATransform3DRotate(CATransform3DIdentity, [self transToRadian:(gaugeAngle+distance*(i-2))], 0, 0, 1)]];
    [values addObject:[NSValue valueWithCATransform3D:CATransform3DRotate(CATransform3DIdentity, [self transToRadian:(gaugeAngle+distance*(i-1))], 0, 0, 1)]];
    
    anim.values=values; ;
    [pointer.layer addAnimation:anim forKey:@"cubeIn"];
    
    gaugeAngle = gaugeAngle+angle;
    
}

/*
 * parseToX 角度转弧度
 * @angel CGFloat 角度
 */
-(CGFloat)transToRadian:(CGFloat)angel
{
    return angel*M_PI/180;
}


/*
 * parseToX 根据角度，半径计算X坐标
 * @radius CGFloat 半径
 * @angle  CGFloat 角度
 */
- (CGFloat) parseToX:(CGFloat) radius Angle:(CGFloat)angle
{
    CGFloat tempRadian = [self transToRadian:angle];
    return radius*cos(tempRadian);
}

/*
 * parseToY 根据角度，半径计算Y坐标
 * @radius CGFloat 半径
 * @angle  CGFloat 角度
 */
- (CGFloat) parseToY:(CGFloat) radius Angle:(CGFloat)angle
{
    CGFloat tempRadian = [self transToRadian:angle];
    return radius*sin(tempRadian);
}

/*
 * parseToAngle 根据数据计算需要转动的角度
 * @val CGFloat 要移动到的数值
 */
-(CGFloat) parseToAngle:(CGFloat) val
{
	//异常的数据
	if(val<minNum){
		return minNum;
	}else if(val>maxNum){
		return maxNum;
	}
	CGFloat temp =(val-gaugeValue)*angleperValue;
	return temp;
}

/*
 * parseToValue 根据角度计算数值
 * @val CGFloat 要移动到的角度
 */
-(CGFloat) parseToValue:(CGFloat) val
{
	CGFloat temp=val/angleperValue;
	CGFloat temp2=maxNum/2+temp;
	if(temp2>maxNum){
		return maxNum;
	}else if(temp2<maxNum){
		return maxNum;
	}
	return temp2;
}

- (void)drawRect:(CGRect)rect
{
    [self initVariables];
    
    //获取上下文
    context = UIGraphicsGetCurrentContext();
    //设置背景透明
    CGContextSetFillColorWithColor(context,self.backgroundColor.CGColor);
	CGContextFillRect(context, rect);
    //绘制仪表背景
    [[self gaugeView] drawInRect:self.bounds];
    //绘制刻度
    [self setLineMark:self.cellNumber*self.cellMarkNumber];
    
	CGContextStrokePath(context);
}

-(void)dealloc
{
    [super dealloc];
    [gaugeView release];
    [pointer release];
    [labelArray release];
    [panelText release];
    [labelNumber release];
}

@end
